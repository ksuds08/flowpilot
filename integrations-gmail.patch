diff --git a/prisma/schema.prisma b/prisma/schema.prisma
index 1b2c3d4..5e6f7a8 100644
--- a/prisma/schema.prisma
+++ b/prisma/schema.prisma
@@
 model Activity {
   id        String   @id @default(cuid())
   content   String
   dueDate   DateTime?
   completed Boolean  @default(false)
   project   Project  @relation(fields: [projectId], references: [id])
   projectId String
   createdAt DateTime @default(now())
 }

+/// NEW: stores OAuth tokens for Gmail, Outlook, etc.
+model UserIntegration {
+  id           String   @id @default(cuid())
+  provider     String   // "google" | "outlook"
+  accessToken  String
+  refreshToken String
+  expiresAt    DateTime
+  user         User     @relation(fields: [userId], references: [id])
+  userId       String
+  createdAt    DateTime @default(now())
+}

diff --git a/src/pages/api/google-oauth.ts b/src/pages/api/google-oauth.ts
index 1234567..89abcde 100644
--- a/src/pages/api/google-oauth.ts
+++ b/src/pages/api/google-oauth.ts
@@
 import { google } from 'googleapis';
 import type { NextApiRequest, NextApiResponse } from 'next';
+import { prisma } from '@/lib/prisma';
 
 export default async function handler(req: NextApiRequest, res: NextApiResponse) {
   const { code } = req.query;
 
   const oauth2Client = new google.auth.OAuth2(
@@
   }
 
   const { tokens } = await oauth2Client.getToken(code as string);
-  // TODO: Persist tokens to DB linked to the current user
-  return res.status(200).json({ ok: true, tokens });
+
+  // TODO: replace with real user ID from your auth middleware
+  const userId = req.headers['x-user-id'] as string | undefined;
+  if (!userId) return res.status(401).json({ error: 'Unauthenticated' });
+
+  await prisma.userIntegration.upsert({
+    where: { userId_provider: { userId, provider: 'google' } },
+    update: {
+      accessToken: tokens.access_token || '',
+      refreshToken: tokens.refresh_token || '',
+      expiresAt: new Date(Date.now() + (tokens.expires_in || 0) * 1000)
+    },
+    create: {
+      provider: 'google',
+      userId,
+      accessToken: tokens.access_token || '',
+      refreshToken: tokens.refresh_token || '',
+      expiresAt: new Date(Date.now() + (tokens.expires_in || 0) * 1000)
+    }
+  });
+
+  return res.redirect('/dashboard?connected=google');
 }
